name: Deploy SPHFS to ECS

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# This workflow contains a single job called "deploy_sphfs_to_ecs"
jobs:
  
  deploy_sphfs_to_ecs:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sphfs
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      # Runs a single command using the runners shell - from aws-actions
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition sphfs-family --query taskDefinition > task-definition.json
      # Update the task definition file prior to deployment with the new container image ID
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: sphfs-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: sphfs-service
          cluster: sphfs-ecs-fargate
          wait-for-service-stability: true
      # Using terraformECSFargate as infra requires CloudFront review on all Terraform changes
      # CloudFront with Managed-CachingDisabled behavior policy
      - name: Update CloudFront origin with created Terraform ALB
        run: |
          apt update && apt install jq
          aws cloudfront get-distribution --id ${{ secrets.CLOUDFRONT_ID }} > distribution.json
          ALB=$(aws elbv2 describe-load-balancers | jq '.LoadBalancers[0].DNSName' | tr -d \")
          ETAG=$(cat distribution.json | jq '.ETag' | tr -d \")
          cat distribution.json | \
            jq --arg ORIGIN "$ALB" '.Distribution.DistributionConfig.Origins.Items[0].Id=$ORIGIN' | \
            jq --arg ORIGIN "$ALB" '.Distribution.DistributionConfig.Origins.Items[0].DomainName=$ORIGIN' | \
            jq --arg ORIGIN "$ALB" '.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId=$ORIGIN' | \
            jq .Distribution.DistributionConfig > distribution2.json
          aws cloudfront update-distribution --id ${{ secrets.CLOUDFRONT_ID }} --distribution-config file://distribution2.json --if-match $ETAG > /dev/null
          rm distribution.json distribution2.json